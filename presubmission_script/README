This directory contains the scripts you will need to turn a catalog of measured shear values 
into a summary file to submit to the Great3 leaderboard website:
  http://great3.projects.phys.ucl.ac.uk/leaderboard/

TABLE OF CONTENTS:
1. Necessary files and programs
2. Catalog format
3. Running the script
4. Analyzing old versions of the Great3 simulations
5. Example script calls

---------------------------------------------------------------------------------------------

1. NECESSARY FILES AND PROGRAMS

To use the scripts in this directory, you will need:
    - An installation of Python; we have checked this code for version 2.6+.  If you have an 
      earlier version and find you have problems, please start an issue on the great3-public 
      repository and we will attempt to fix it for you:
      https://github.com/barnabytprowe/great3-public/issues
    - An installation of Michael Jarvis's corr2 code, which can be downloaded from
      http://code.google.com/p/mjarvis/ . A command-line option exists to tell the great3 
      script where to find the executable if you cannot do a system-wide installation.
    - Optionally, you may install either the package pyfits or the package astropy, which 
      will let Python read and write FITS files.  This speeds up the analysis of the 
      variable-shear branches as well as allowing you to give FITS catalogs to 
      presubmission.py to analyze.  These packages are not necessary if you generate 
      ASCII/Unicode shear catalogs.

This directory contains this README file and two Python files (presubmission.py and 
branch_id.py).  If for some reason you are missing one of these files, they are all available
from the great3-public repository (http://github.com/barnabytprowe/great3-public).

---------------------------------------------------------------------------------------------

2. CATALOG FORMATS

Catalogs may be either FITS files (if you have the Python modules pyfits or astropy) or 
whitespace-delimited ASCII/Unicode files.  If you cannot measure a shape for a galaxy, a 
shear value of >=10 (positive only!) will direct presubmission.py to ignore that shear. 
However, the galaxy must still be included in order to pass the catalog completeness checks.

At a bare minimum, your catalog must contain:
    - A galaxy ID number drawn from the GREAT3 catalogs
    - A g1 shear (not distortion--see below)
    - A g2 shear (similarly)
Optionally, you may include a column of galaxy weights.  Note that you do not need to include
galaxy positions or subfields--this is encoded in the ID number.  

The script will not run if your catalog does not include all galaxies from the branch you are 
making a summary file for.  Positive shear values >=10 will be taken to mean the object could
not be measured, and the script will omit such objects from its calculations.  Again, 
however, they should still be included in the catalog.

The shears should be defined in a coordinate system as described on the conventions page of 
the great3-public repository.  They should be shears and not distortions, that is, they 
should satisfy Eqs. 3 and 4 of the Great3 Handbook rather than Eqs. 7 and 8; see also section
2.2 of Bernstein & Jarvis 2002, where our desired parameterization is called g (Eq. 2.8).

---------------------------------------------------------------------------------------------

3. RUNNING THE SCRIPT

In the simplest case, the script may be run by typing
    ./presubmission.py shear_catalog_filename(s)
for any number of shear catalogs (as long as they all contain galaxies from the same branch),
but there are a number of command-line options to direct the script's behavior.

IMPORTANT NOTE: Some of the flags below contain a single hyphen and then a character string 
of more than one letter, eg -g1.  You CANNOT use those flags if you are using Python 2.6 or 
earlier and have not installed the package argparse independently! Instead, use the long 
version (--g1-column).

Branches: Since the galaxy IDs and required summary statistics are different for different 
branches, you must specify which branch you are analyzing.  If not given explicitly, the 
script will attempt to determine the branch from the directory name or the shear catalog 
filenames (by checking if they contain a character string that looks like a branch name); if 
you would like to set the branch type explicitly, pass the argument -b branchname, where 
branchname should be a hyphenated character string, such as "variable_psf-ground-constant".
    
Column definitions: By default, the script assumes that the galaxy id is in column 0 (the 
first column), g1 in column 1, and g2 in column 2.  You may tell it a different column number
n (or a string n if using FITS files) with the following command line options:
    -i n or --id-column n
    -g1 n or --g1-column n
    -g2 n or --g2-column n
    -w n or --weight-column n
You may pass none, some, or all of these options.  The default numbering starts 0 for the 
first column, 1 for the second, etc; if you would like to use a FORTRAN-like convention, with
the first column being defined as 1, the second as 2, etc, you can pass the option -f or 
--use-fortran-convention.  Note that -f changes the default numbers, too, so that the default 
first column is still the galaxy ID number, now with column number 1.

File-reading options: The script will try to determine from the file extension whether or not
your catalogs are FITS files. Its default assumption is ASCII files.  If you would like to 
force it to process the files as FITS files, pass the argument --use-fits.  For FITS files, 
you can specify the HDU number via -hdu n or --hdu-number n (default 1); for ASCII files, you
can specify the character or character string str denoting comment lines via -c str or 
--comment-identifier str (default #).

File-writing options: The generated summary file will be written by default to 
great3_submission.txt.  You can pass a different file name with -o or --output-file.

Location of the corr2 executable: you may give the program the path to the corr2 executable 
via the options -c2 or --corr2 in case it cannot be located in your default path.

---------------------------------------------------------------------------------------------

4. ANALYZING OLD VERSIONS OF THE GREAT3 SIMULATIONS

This script is kept up-to-date such that it will analyze the most recent versions of the 
Great3 simulations.  The leaderboard also compares uploaded scores to the most recent 
versions.  However, you may wish to analyze a previous version of your catalogues (to check 
formats, for example), and this can fail if the galaxy ID numbers have changed between 
versions.  Previous versions of this script can be downloaded as tagged versions from the 
great3-public repository.

CURRENT RELEASE (as of 10/17): no tag necessary!
ALPHA RELEASE 2 (MD5 71e2298672c1244237401f37dd11e9f9,
                 MD5 c4627b4dd8810251f80481672ae56d71,
                 MD5 160f3e2938f723702045ffceedd1b5c0,
                 MD5 509a4a221ef405bf0c18404ffd169f80): tag alpha-release-2
ALPHA RELEASE 1 (MD5 146609944f92b8411aff594275af7204,
                 MD5 5d607c9a4a39518c7512534461a49f45,
                 MD5 98d383be3de05da2ba79dbe8524d5bd7,
                 MD5 b6289fd795be2e35bafbe4c9a46a5704): tag alpha-release-1
               
You can access these versions in two ways: by downloading from the webpage or by using a 
cloned version of the repository (if you downloaded this script using 'git clone' sometime in
the past).

To download: go to http://github.com/barnabytprowe/great3-public/tree/tag-name and select the
"download ZIP" button on the right-hand side of the page below the menu.

To use a cloned repository: type
    git checkout tag-name
on the command line.  Note that you may get a "detached head" message.  This is fine and 
expected for the tagged versions.

---------------------------------------------------------------------------------------------

5. EXAMPLE SCRIPT CALLS
    
Single shear catalog file catalog.dat with galaxy IDs in the sixth column:
    ./presubmission.py -i 5 catalog.dat

Three shear catalog FITS files with galaxy IDs in the column called 'gid':
    ./presubmission.py -i gid catalog1.fits catalog2.fits catalog3.fits

Single shear catalog FITS file with the data in HDU 2 and weights in the sixth column:
    ./presubmission.py -w 5 -hdu 2 catalog.fits

One shear catalog file per image with weights in the sixth column, FORTRAN column numbering, 
and the corr2 executable located in /usr/bin/corr2, for the control-space-constant branch:
    ./presubmission.py -fw 6 -c2 /usr/bin/corr2 -b control-space-constant catalog-image-*.fits
    
Just like other UNIX programs, command-line arguments that do not take a value may be 
combined into a single flag, but arguments that do take a value must stand alone or come last
in a series of flags that do not take values.

Single shear catalog file with a nonstandard column mapping, using FORTRAN-convention 
numbering and a specific version of Python:
    /usr/local/bin/python presubmission.py -f -g1 1 -g2 2 -i 5 -w 8 catalog.dat 
    
